<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>akamai_v3</title>
    <link href="/2024/11/30/akamai-v3/"/>
    <url>/2024/11/30/akamai-v3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>akamai_sbsd</title>
    <link href="/2024/11/30/akamai-sbsd/"/>
    <url>/2024/11/30/akamai-sbsd/</url>
    
    <content type="html"><![CDATA[<p>最近换了工作 好久没写东西了</p><h1 id="akamai-sbsd"><a href="#akamai-sbsd" class="headerlink" title="akamai sbsd"></a>akamai sbsd</h1><p>这是9月份在上家公司时做的<br>现在用的网站还挺多的<br>所以来说说<br><img src="/2024/11/30/akamai-sbsd/img.png"><br>表现形式 就是在请求时会返回这样的中间页面 标志基本就是 src 包含 ?v&#x3D;{uuid}&amp;t&#x3D;{\d+} 的js地址<br>v 和 t 后面要用到</p><p><img src="/2024/11/30/akamai-sbsd/img_1.png"><br>这里 我们用xhr 断点 就能找到发包位置<br>也可以找到一个大的json对象<br><img src="/2024/11/30/akamai-sbsd/img_2.png"><br>里面包含很多的s开头的key 就是浏览器环境<br>其中比较需要关注的  就是 s123 这个参数<br><img src="/2024/11/30/akamai-sbsd/img_3.png"><br>在这行断点才生成的这个参数  通过调试 可知这个逻辑是vmp 的<br>逻辑不复杂 插桩即可解决<br><img src="/2024/11/30/akamai-sbsd/img_4.png"><br>发送数据前的加密<br><img src="/2024/11/30/akamai-sbsd/img_6.png"><br>可知 body &#x3D; h90(HG0, lb);<br>HG0 就是json对象  lb 是url参数中的 v<br><img src="/2024/11/30/akamai-sbsd/img_5.png"><br>就调试吧 这段很简单<br>就是把 HG0  json.stringify 后转  hex<br>然后对hex字符串的每一位 字节+1</p><p>再用hmacsha256 lb 为key 加个sign<br>这个sign 也要 转  hex<br>然后对hex字符串的每一位 字节+1<br>再把这两段拼起来就完事儿了</p><p>然后发送请求返回的cookie sbsd_c  开头为 2~1<br>还会返回 sbsd 的cookie<br>就会通过验证了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>利用node c++插件过document.all检测</title>
    <link href="/2024/08/02/document-all/"/>
    <url>/2024/08/02/document-all/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>部分网站会检测 document.all 这个不完全兼容的实现<br>表现为 </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>反编译kasada</title>
    <link href="/2024/07/07/decompile-ksada/"/>
    <url>/2024/07/07/decompile-ksada/</url>
    
    <content type="html"><![CDATA[<h2 id="继续研究反编译"><a href="#继续研究反编译" class="headerlink" title="继续研究反编译"></a>继续研究反编译</h2><p>这次的网站是 一个航司网站 他有 akamai和 kasada 两种防护<br>akamai 没啥好说的   </p><h3 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析"></a>结构分析</h3><p>最开始有个长字符串 处理成 一个十几万的数组</p><p><img src="/2024/07/07/decompile-ksada/0.png" alt="0.png"><br>通过 r.W[0] 走什么分支 还有数据的存取</p><p>M是一个98个函数组成的数组 代表不同的执行逻辑<br><img src="/2024/07/07/decompile-ksada/1.png" alt="1.png"><br>这里给他转成了 switch case 的结构 方便分析</p><p><img src="/2024/07/07/decompile-ksada/2.png" alt="2.png"> </p><p>我这里还是switch 加default 处理key的方式 </p><h3 id="58-判断跳转"><a href="#58-判断跳转" class="headerlink" title="58 判断跳转"></a>58 判断跳转</h3><p><img src="/2024/07/07/decompile-ksada/58.png" alt="58.png"> </p><p>84 也是这样的判断跳转<br>需要注意的时候 在执行过程中可能会遇到95 直接跳转<br>如果跳转到的序号在当前判断之前 可能是个while 需要仔细分析一下 </p><h3 id="36-开辟内存空间"><a href="#36-开辟内存空间" class="headerlink" title="36 开辟内存空间"></a>36 开辟内存空间</h3><p><img src="/2024/07/07/decompile-ksada/36.png" alt="36.png"><br>这步相当于新建一些变量 用来存放计算过程中的一些值</p><h3 id="84-try-catch"><a href="#84-try-catch" class="headerlink" title="84 try catch"></a>84 try catch</h3><p><img src="/2024/07/07/decompile-ksada/try.png" alt="try.png"> </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个难度不大  循环跳转部分并不复杂<br>就是有一些可能会恒等的表达式判断 处理一下就行 </p><p>看看里面的检测点吧<br><img src="/2024/07/07/decompile-ksada/jiance1.png" alt="[jiance1.png]"> </p><p><img src="/2024/07/07/decompile-ksada/jiance2.png" alt="[jiance2.png]"> </p><h1 id="欢迎关注我的公众号-谢谢大家"><a href="#欢迎关注我的公众号-谢谢大家" class="headerlink" title="欢迎关注我的公众号 谢谢大家"></a>欢迎关注我的公众号 谢谢大家</h1><p><img src="/2024/07/07/decompile-ksada/img_8.png" alt="img_8.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>反编译腾讯vmp</title>
    <link href="/2024/06/17/decompile-tx/"/>
    <url>/2024/06/17/decompile-tx/</url>
    
    <content type="html"><![CDATA[<h1 id="反编译腾讯vmp"><a href="#反编译腾讯vmp" class="headerlink" title="反编译腾讯vmp"></a>反编译腾讯vmp</h1><p>继续学习的过程 多翻译几个vmp 学习<br>看看他们的是怎么编译的 写一个自己的vmp</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">__TENCENT_CHAOS_VM</span>(<span class="hljs-params">U, T, g, D, j, E, K, w</span>) &#123;<br>   <span class="hljs-comment">// U指令起点</span><br>   <span class="hljs-comment">// T是指令list</span><br>   <span class="hljs-comment">// g是函数this 或window对象</span><br>   <span class="hljs-comment">// D是内部变量和栈</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-number">0</span>; ;)<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> B = !<span class="hljs-number">1</span>; !B;) &#123;<br>                    <span class="hljs-keyword">let</span> now = U;<br>                    <span class="hljs-keyword">if</span> (now === -<span class="hljs-number">1</span>) &#123;<br>                        <span class="hljs-keyword">break</span><br>                    &#125;<br>                    <span class="hljs-keyword">let</span> op = T[U++];<br>                    <span class="hljs-comment">// Q是一个大的函数数组 可以转为switch case 结构方便执行</span><br>                    B = <span class="hljs-title function_">Q</span>(op, start);<br>                &#125;<br>                <span class="hljs-comment">// 获取返回值的地方</span><br>                <span class="hljs-keyword">var</span> res = l ? (D.<span class="hljs-title function_">pop</span>(), D.<span class="hljs-title function_">slice</span>(<span class="hljs-number">3</span> + __TENCENT_CHAOS_VM.<span class="hljs-property">v</span>)) : D.<span class="hljs-title function_">pop</span>();<br>                <span class="hljs-keyword">return</span> res<br>            &#125; <span class="hljs-keyword">catch</span> (c) &#123;<br>                <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">var</span> Y = O.<span class="hljs-title function_">pop</span>();<br>                <span class="hljs-keyword">if</span> (Y === <span class="hljs-literal">undefined</span>)<br>                    <span class="hljs-keyword">throw</span> c;<br>                W = c,<br>                    U = Y[<span class="hljs-number">0</span>],<br>                    D.<span class="hljs-property">length</span> = Y[<span class="hljs-number">1</span>],<br>                Y[<span class="hljs-number">2</span>] &amp;&amp; (D[Y[<span class="hljs-number">2</span>]][<span class="hljs-number">0</span>] = W)<br>            &#125;<br></code></pre></td></tr></table></figure><h4 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h4><p><img src="/0.png" alt="0.png">  </p><p>在这里可以看到Q函数的结构<br>最开始的地方给switch 加个default 用来处理未知的指令<br>从最第一个指令开始</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 54,3,10,2,41,1518,57,54,6,10,2,10,3,10,4,10,5,41,239,54,54,7,10,2,10,3,10,4,65,5,2,3,47,37,25,40,43,41,64,65,43,65,5,2,3,47,22,57,101,57,120,57,112,57,111,57,114,57,116,57,115,38,37,5,65,4,65,5,2,3,47,22,57,79,57,98,57,106,57,101,57,99,57,116,63,36,0,7,22,57,105,17,2,3,39,43,43,7,22,57</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">54</span>:<br>    <span class="hljs-comment">// 扩充栈长度</span><br>    D.<span class="hljs-property">length</span> = T[U++];<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>    <span class="hljs-comment">// 初始化变量固定位置</span><br>    <span class="hljs-keyword">var</span> l = T[U++];<br>    D[l] = D[l] === <span class="hljs-literal">undefined</span> ? [] : D[l];<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">41</span>:<br>    <span class="hljs-comment">// 直接跳转 这个在ifelse 和while循环中 都要加处理</span><br>    U = T[U++];<br></code></pre></td></tr></table></figure><p>下一个地方是vmp的函数反编译了 拿出来说</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">case</span> <span class="hljs-number">31</span>:<br>    <span class="hljs-comment">// 构造一个函数部分</span><br>    <span class="hljs-comment">// 第一个for 是处理函数要用到的其他地方定义的变量</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> W = T[U++], A = [], l = T[U++], O = T[U++], Q = [], B = <span class="hljs-number">0</span>; B &lt; l; B++) A[T[U++]] = D[T[U++]];<br>    <span class="hljs-comment">// 第二个for是参数入参长度和位置</span><br>    <span class="hljs-keyword">for</span> (B = <span class="hljs-number">0</span>; B &lt; O; B++) Q[B] = T[U++];<br>    D.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">C</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 这里是实际函数vmp执行的地方</span><br>        <span class="hljs-keyword">var</span> l = A.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>);<br>        l[<span class="hljs-number">0</span>] = [<span class="hljs-variable language_">this</span>], l[<span class="hljs-number">1</span>] = [<span class="hljs-variable language_">arguments</span>], l[<span class="hljs-number">2</span>] = [C];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> O = <span class="hljs-number">0</span>; O &lt; Q.<span class="hljs-property">length</span> &amp;&amp; O &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; O++) <span class="hljs-number">0</span> &lt; Q[O] &amp;&amp; (l[Q[O]] = [<span class="hljs-variable language_">arguments</span>[O]]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">__TENCENT_CHAOS_VM</span>(W, T, g, l, j, E, K, w);<br>    &#125;);<br></code></pre></td></tr></table></figure><p>照着这么处理 先跳过函数反编译的地方 大概可以得到一个 这样的代码<br><img src="/2024/06/17/decompile-tx/code2.png" alt="code2.png"></p><p>然后继续看函数的反编译<br>反编译代码<br><img src="/2024/06/17/decompile-tx/code.png" alt="code.png"><br>然后看节点22的处理<br>这里的代码是为了优化反编译结果 连续生成一个字符串的地方<br><img src="/2024/06/17/decompile-tx/code3.png" alt="code3.png"><br>其他的就不一一介绍了 按部就班就可以了  </p><h3 id="再需要注意的就是处理-if-else-while-break-continue-try-catch-finally"><a href="#再需要注意的就是处理-if-else-while-break-continue-try-catch-finally" class="headerlink" title="再需要注意的就是处理 if-else while break continue try-catch-finally"></a>再需要注意的就是处理 if-else while break continue try-catch-finally</h3><p>先看看ifelse 和while</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> l = T[U++];<br>D[D.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] &amp;&amp; (U = l);<br></code></pre></td></tr></table></figure><p>这个部分的话 需要看后续跳转到哪里<br>比如D[D.length-1] &#x3D; true<br>会跳到l 那么 l开始就是if 部分<br>继续走U+1 就是else 部分<br>然后看后面会不会在跳到当前U的上边 这个流程就可能是while的更新部分<br>循环这里大概就是这样去处理了</p><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h3><p>这里基本就是你在代码里搜一下 有没有 try<br>有的话 这个vmp就有这个处理逻辑了  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">case</span> <span class="hljs-number">58</span> <br><span class="hljs-comment">// 这里对应后面的Y 代表出现了异常后该怎么走</span><br>    O.<span class="hljs-title function_">push</span>([T[U++], D.<span class="hljs-property">length</span>, T[U++]]);<br><span class="hljs-keyword">catch</span> (c) &#123;<br>    <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> Y = O.<span class="hljs-title function_">pop</span>();<br>    <span class="hljs-keyword">if</span> (Y === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">throw</span> c;<br>    W = c, U = Y[<span class="hljs-number">0</span>], D.<span class="hljs-property">length</span> = Y[<span class="hljs-number">1</span>], Y[<span class="hljs-number">2</span>] &amp;&amp; (D[Y[<span class="hljs-number">2</span>]][<span class="hljs-number">0</span>] = W);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/source/_posts/1.png" alt="1.png"><br>基本就是这样处理了  </p><h3 id="看看结果"><a href="#看看结果" class="headerlink" title="看看结果"></a>看看结果</h3><p><img src="/2024/06/17/decompile-tx/img_2.png" alt="img_2.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个的反编译过程就是这样了<br>我认为的难点就是变量和作用域跨函数的处理<br>还有循环的判断 否则会死循环一直走某些指令<br>下一步 想自己实现一个vmp 希望可以顺利一些吧 </p><h1 id="欢迎关注我的公众号-谢谢大家"><a href="#欢迎关注我的公众号-谢谢大家" class="headerlink" title="欢迎关注我的公众号 谢谢大家"></a>欢迎关注我的公众号 谢谢大家</h1><p><img src="/2024/06/17/decompile-tx/img_8.png" alt="img_8.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>反编译抖音 a_bogus vmp</title>
    <link href="/2024/05/24/dy-decompile/"/>
    <url>/2024/05/24/dy-decompile/</url>
    
    <content type="html"><![CDATA[<h2 id="接上篇的继续反编译-vmp-来进行学习"><a href="#接上篇的继续反编译-vmp-来进行学习" class="headerlink" title="接上篇的继续反编译 vmp 来进行学习"></a>接上篇的继续反编译 vmp 来进行学习</h2><p>抖音的不太一样的点在于 他的vmp代码是分散的<br>好几段代码都是vmp的 然后指令对应的操作还不一样 就很蛋疼…<br>而且 指令对应的操作也是if else 还有三元表达式形式的 不太好找位置</p><h3 id="第一步-看vmp代码结构"><a href="#第一步-看vmp代码结构" class="headerlink" title="第一步 看vmp代码结构"></a>第一步 看vmp代码结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angular2html">484e4f4a403f524300033604d6dbeab10000045d18187b<br>他通过一系列操作把这个长字符串转成了操作指令集<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> g = []; ;) <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">var</span> m = i[r++];<br>    <span class="hljs-comment">// i 就是上面的长字符串处理后的结果</span><br>    <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">37</span>) <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">18</span>) <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">7</span>) m &lt; <span class="hljs-number">3</span> ? p[++d] = <span class="hljs-number">0</span> === m || <span class="hljs-literal">null</span> : <span class="hljs-number">3</span> === m ? (c = i[r++], p[++d] = c &lt;&lt; <span class="hljs-number">24</span> &gt;&gt; <span class="hljs-number">24</span>) : (c = ((c = ((c = i[r++]) &lt;&lt; <span class="hljs-number">8</span>) + i[r++]) &lt;&lt; <span class="hljs-number">8</span>) + i[r++], p[++d] = (c &lt;&lt; <span class="hljs-number">8</span>) + i[r++]); <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">13</span>) <span class="hljs-number">7</span> === m ? (c = (i[r] &lt;&lt; <span class="hljs-number">8</span>) + i[r + <span class="hljs-number">1</span>], r += <span class="hljs-number">2</span>, p[++d] = o[c]) : p[++d] = <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">14</span>) p[++d] = &#123;&#125;; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">14</span> === m) c = (i[r] &lt;&lt; <span class="hljs-number">8</span>) + i[r + <span class="hljs-number">1</span>], r += <span class="hljs-number">2</span>, s = o[c], u = p[d--], p[d][s] = u; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (s = i[r++], u = i[r++], b = v; s &gt; <span class="hljs-number">0</span>; --s) b = b.<span class="hljs-property">p</span>;<br>        p[++d] = b[u]<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">28</span>) <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">20</span>) <span class="hljs-number">18</span> === m ? (c = (i[r] &lt;&lt; <span class="hljs-number">8</span>) + i[r + <span class="hljs-number">1</span>], r += <span class="hljs-number">2</span>, s = o[c], p[d] = p[d][s]) : (s = p[d--], p[d] = p[d][s]); <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">22</span>) &#123;<br>        <span class="hljs-keyword">for</span> (s = i[r++], u = i[r++], b = v; s &gt; <span class="hljs-number">0</span>; --s) b = b.<span class="hljs-property">p</span>;<br>        b[u] = p[d--]<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">22</span> === m) s = p[d--], u = p[d--], b = p[d--], u[s] = b; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (s = i[r++], u = i[r++], b = v, b = v; s &gt; <span class="hljs-number">0</span>; --s) b = b.<span class="hljs-property">p</span>;<br>        p[++d] = b, p[++d] = u<br>    &#125; <span class="hljs-keyword">else</span> m &lt; <span class="hljs-number">33</span> ? <span class="hljs-number">28</span> === m ? (s = p[d--], p[d] %= s) : p[d] = -p[d] : m &lt; <span class="hljs-number">35</span> ? (s = p[d--], b = (u = p[d--])[s]++, p[++d] = b) : <span class="hljs-number">35</span> === m ? (s = p[d--], p[d] = p[d] == s) : (s = p[d--], p[d] = p[d] != s); <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">58</span>) m &lt; <span class="hljs-number">51</span> ? m &lt; <span class="hljs-number">39</span> ? <span class="hljs-number">37</span> === m ? (s = p[d--], p[d] = p[d] === s) : (s = p[d--], p[d] = p[d] !== s) : m &lt; <span class="hljs-number">44</span> ? (s = p[d--], p[d] = p[d] &lt; s) : <span class="hljs-number">44</span> === m ? (s = p[d--], p[d] = p[d] &gt;&gt; s) : p[d] = !p[d] : m &lt; <span class="hljs-number">53</span> ? <span class="hljs-number">51</span> === m ? (c = (c = (i[r] &lt;&lt; <span class="hljs-number">8</span>) + i[r + <span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">16</span> &gt;&gt; <span class="hljs-number">16</span>, r += <span class="hljs-number">2</span>, p[d] ? --d : r += c) : (c = (c = (i[r] &lt;&lt; <span class="hljs-number">8</span>) + i[r + <span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">16</span> &gt;&gt; <span class="hljs-number">16</span>, r += <span class="hljs-number">2</span>, p[d] ? r += c : --d) : m &lt; <span class="hljs-number">54</span> ? (s = p[d--], (u = p[d--])[s] = p[d]) : <span class="hljs-number">54</span> === m ? (s = p[d--], p[d] = p[d] <span class="hljs-keyword">in</span> s) : p[d] = <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">68</span>) <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">64</span>) <span class="hljs-number">58</span> === m ? p[d] = <span class="hljs-keyword">typeof</span> p[d] : (c = i[r++], s = p[d--], (u = <span class="hljs-keyword">function</span> <span class="hljs-title function_">e</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> r = e.<span class="hljs-property">_v</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">0</span>, e.<span class="hljs-property">_u</span>)(r[<span class="hljs-number">0</span>], <span class="hljs-variable language_">arguments</span>, r[<span class="hljs-number">1</span>], r[<span class="hljs-number">2</span>], <span class="hljs-variable language_">this</span>)<br>    &#125;).<span class="hljs-property">_v</span> = [s, c, v], u.<span class="hljs-property">_u</span> = e, p[++d] = u); <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">66</span>) <span class="hljs-keyword">throw</span> s = p[d--];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">66</span> === m) &#123;<br>            <span class="hljs-keyword">for</span> (s = p[d--], u = <span class="hljs-literal">null</span>; b = g.<span class="hljs-title function_">pop</span>();) <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> === b[<span class="hljs-number">0</span>] || <span class="hljs-number">3</span> === b[<span class="hljs-number">0</span>]) &#123;<br>                u = b;<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (u) r = u[<span class="hljs-number">2</span>], u[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>, g.<span class="hljs-title function_">push</span>(u); <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (!h) <span class="hljs-keyword">return</span> s;<br>                r = h[<span class="hljs-number">1</span>], f = h[<span class="hljs-number">2</span>], v = h[<span class="hljs-number">3</span>], g = h[<span class="hljs-number">4</span>], p[++d] = s, h = h[<span class="hljs-number">0</span>]<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> d -= c = i[r++], u = p.<span class="hljs-title function_">slice</span>(d + <span class="hljs-number">1</span>, d + c + <span class="hljs-number">1</span>), s = p[d--], b = p[d--], s.<span class="hljs-property">_u</span> === e ? (s = s.<span class="hljs-property">_v</span>, h = [h, r, f, v, g], r = s[<span class="hljs-number">0</span>], <span class="hljs-literal">null</span> == b &amp;&amp; (b = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span><br>        &#125;()), f = b, (v = [u].<span class="hljs-title function_">concat</span>(u)).<span class="hljs-property">length</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(s[<span class="hljs-number">1</span>], c) + <span class="hljs-number">1</span>, v.<span class="hljs-property">p</span> = s[<span class="hljs-number">2</span>], g = []) : (l = s.<span class="hljs-title function_">apply</span>(b, u), p[++d] = l)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">71</span>) <span class="hljs-keyword">if</span> (<span class="hljs-number">68</span> === m) &#123;<br>        <span class="hljs-keyword">for</span> (c = i[r++], b = [<span class="hljs-keyword">void</span> <span class="hljs-number">0</span>], l = c; l &gt; <span class="hljs-number">0</span>; --l) b[l] = p[d--];<br>        u = p[d--], l = <span class="hljs-keyword">new</span> (s = <span class="hljs-title class_">Function</span>.<span class="hljs-property">bind</span>.<span class="hljs-title function_">apply</span>(u, b)), p[++d] = l<br>    &#125; <span class="hljs-keyword">else</span> r += <span class="hljs-number">2</span> + (c = (c = (i[r] &lt;&lt; <span class="hljs-number">8</span>) + i[r + <span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">16</span> &gt;&gt; <span class="hljs-number">16</span>); <span class="hljs-keyword">else</span> m &lt; <span class="hljs-number">73</span> ? (c = (c = (i[r] &lt;&lt; <span class="hljs-number">8</span>) + i[r + <span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">16</span> &gt;&gt; <span class="hljs-number">16</span>, r += <span class="hljs-number">2</span>, (s = p[d--]) || (r += c)) : <span class="hljs-number">73</span> === m ? --d : (s = p[d], p[++d] = s)<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-keyword">for</span> (; (c = g.<span class="hljs-title function_">pop</span>()) &amp;&amp; !c[<span class="hljs-number">0</span>];) ;<br>    <span class="hljs-keyword">if</span> (!c) &#123;<br>        <span class="hljs-attr">e</span>:<span class="hljs-keyword">for</span> (; h;) &#123;<br>            <span class="hljs-keyword">for</span> (s = h[<span class="hljs-number">4</span>]; c = s.<span class="hljs-title function_">pop</span>();) <span class="hljs-keyword">if</span> (c[<span class="hljs-number">0</span>]) <span class="hljs-keyword">break</span> e;<br>            h = h[<span class="hljs-number">0</span>]<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!h) <span class="hljs-keyword">throw</span> e;<br>        r = h[<span class="hljs-number">1</span>], f = h[<span class="hljs-number">2</span>], v = h[<span class="hljs-number">3</span>], g = h[<span class="hljs-number">4</span>], h = h[<span class="hljs-number">0</span>]<br>    &#125;<br>    <span class="hljs-number">1</span> === (s = c[<span class="hljs-number">0</span>]) ? (r = c[<span class="hljs-number">2</span>], c[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>, g.<span class="hljs-title function_">push</span>(c), p[++d] = e) : <span class="hljs-number">2</span> === s ? (r = c[<span class="hljs-number">2</span>], c[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>, g.<span class="hljs-title function_">push</span>(c)) : (r = c[<span class="hljs-number">3</span>], c[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>, g.<span class="hljs-title function_">push</span>(c), p[++d] = e)<br></code></pre></td></tr></table></figure><p>首先要简化 他那一大堆 if else  变成 switch case  方便后续的操作<br><img src="/0.png" alt="0.png"><br>变成这样就好了 方便后续的操作 </p><h2 id="第二步-看一些关键的变量"><a href="#第二步-看一些关键的变量" class="headerlink" title="第二步 看一些关键的变量"></a>第二步 看一些关键的变量</h2><p>解释都在代码里了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> c, s, u, b, l, d = -<span class="hljs-number">1</span>, p = [], h = <span class="hljs-literal">null</span>, v = [t];<br><span class="hljs-comment">// 这些变量分别代表了不同的含义 比如 栈 函数变量 函数入参 寄存器 等</span><br><span class="hljs-comment">// 需要注意反编译过程中的 变量作用域问题</span><br><span class="hljs-keyword">for</span> (s = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(t.<span class="hljs-property">length</span>, n), u = <span class="hljs-number">0</span>; u &lt; s; ++u) v.<span class="hljs-title function_">push</span>(t[u]);<br>v.<span class="hljs-property">p</span> = a;<br><span class="hljs-string">``</span><span class="hljs-string">`  </span><br><span class="hljs-string">## 第三步 开始反编译</span><br><span class="hljs-string">#### 反编译函数</span><br><span class="hljs-string">这是源代码中定义函数的地方</span><br><span class="hljs-string">`</span><span class="hljs-string">``</span>javascript<br>    i = r[f++];<span class="hljs-comment">// i 是函数入参数量</span><br>    l = o[p--];<span class="hljs-comment">// l是函数起点指令下标</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;newFunc&#x27;</span>,now,l,i);<br>    (n = <span class="hljs-keyword">function</span> <span class="hljs-title function_">e</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> f = e.<span class="hljs-property">_v</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">0</span>, e.<span class="hljs-property">_u</span>)(f[<span class="hljs-number">0</span>], <span class="hljs-variable language_">arguments</span>, f[<span class="hljs-number">1</span>], f[<span class="hljs-number">2</span>], <span class="hljs-variable language_">this</span>);<br>    &#125;).<span class="hljs-property">_v</span> = [l, i, h];<br>    n.<span class="hljs-property">_u</span> = e;<br>    o[++p] = n;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p)<br></code></pre></td></tr></table></figure><p>反编译成这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">i = r[f++];<br>l = o[p--];<br><span class="hljs-keyword">let</span> body63 = [];<br><span class="hljs-comment">// (n = function e() &#123;</span><br><span class="hljs-comment">//     var f = e._v;</span><br><span class="hljs-comment">//     return (0, e._u)(f[0], arguments, f[1], f[2], this);</span><br><span class="hljs-comment">// &#125;)._v = [l, i, h];</span><br><span class="hljs-comment">// if (now === 1192)debugger</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;newFunc&#x27;</span>, l , i, h.<span class="hljs-property">idx</span>, p+<span class="hljs-number">1</span>) <br><span class="hljs-keyword">let</span> func63 = types.<span class="hljs-title function_">identifier</span>(<span class="hljs-string">&#x27;func&#x27;</span> + +l)<br><span class="hljs-comment">// if (s == 1582)&#123;</span><br><span class="hljs-keyword">let</span> hCopy = h.<span class="hljs-title function_">slice</span>();<br><span class="hljs-keyword">let</span> args = types.<span class="hljs-title function_">identifier</span>(<span class="hljs-string">&#x27;arguments&#x27;</span>);<br>args.<span class="hljs-property">idx</span> = h.<span class="hljs-property">idx</span>+<span class="hljs-number">1</span><br><span class="hljs-title function_">e</span>(l, args, i, h, <span class="hljs-variable language_">this</span>,body63, -<span class="hljs-number">1</span>) <span class="hljs-comment">// 自己处理了一些东西</span><br><span class="hljs-comment">// h = hCopy.slice();</span><br><span class="hljs-keyword">let</span> v61 = types.<span class="hljs-title function_">functionDeclaration</span>(func63, [], types.<span class="hljs-title function_">blockStatement</span>(body63))<br>body.<span class="hljs-title function_">push</span>(v61)<br><span class="hljs-comment">// func63._u = e;</span><br>func63.<span class="hljs-property">_v</span> = [l, i, h];<br>o[++p] = func63;<br></code></pre></td></tr></table></figure><h4 id="反编译判断"><a href="#反编译判断" class="headerlink" title="反编译判断"></a>反编译判断</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> i = (i = (r[f] &lt;&lt; <span class="hljs-number">8</span>) + r[f + <span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">16</span> &gt;&gt; <span class="hljs-number">16</span>;<br>f += <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (o[p]) &#123;<br>    f += i; <span class="hljs-comment">// 跳过一部分指令</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    --p;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">i = (i = (r[f] &lt;&lt; <span class="hljs-number">8</span>) + r[f + <span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">16</span> &gt;&gt; <span class="hljs-number">16</span>;<br>f += <span class="hljs-number">2</span>;<br><span class="hljs-keyword">let</span> body52 = [];<br><span class="hljs-comment">// 这种不是函数的反编译 需要处理好作用域问题 否则会报错</span><br><span class="hljs-title function_">e</span>(f, h, c, b, a,body52, i-<span class="hljs-number">2</span>-<span class="hljs-number">1</span>, <span class="hljs-literal">false</span>, o,p) <br>body.<span class="hljs-title function_">push</span>(types.<span class="hljs-title function_">ifStatement</span>(o[p], types.<span class="hljs-title function_">blockStatement</span>(body52)))<br></code></pre></td></tr></table></figure><h2 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> tmp2248 = &#123;&#125;;<br>    <span class="hljs-keyword">var</span> tmp2249 = X[<span class="hljs-string">&quot;apply&quot;</span>](<span class="hljs-literal">true</span>, []);<br>    <span class="hljs-keyword">var</span> tmp2250 = func618[<span class="hljs-string">&quot;apply&quot;</span>](<span class="hljs-literal">true</span>, [tmp2248, tmp2249]);<br>    <span class="hljs-keyword">var</span> tmp2251 = &#123;&#125;;<br>    <span class="hljs-keyword">var</span> tmp2252 = &#123;&#125;;<br>    <span class="hljs-keyword">var</span> tmp2253 = navigator[<span class="hljs-string">&quot;platform&quot;</span>];<br>    tmp2252[<span class="hljs-string">&quot;platform&quot;</span>] = tmp2253;<br>    <span class="hljs-keyword">var</span> tmp2254 = func618[<span class="hljs-string">&quot;apply&quot;</span>](<span class="hljs-literal">true</span>, [tmp2250, tmp2251, tmp2252]);<br>    tmp2018 = tmp2254;<br>    <span class="hljs-keyword">var</span> tmp2255 = func1198[<span class="hljs-string">&quot;apply&quot;</span>](<span class="hljs-literal">true</span>, [tmp2254]);<br>    tmp2019 = tmp2255;<br>    <span class="hljs-keyword">var</span> tmp2256 = func1086[<span class="hljs-string">&quot;apply&quot;</span>](<span class="hljs-literal">true</span>, [tmp2255]);<br>    tmp2020 = tmp2256;<br>    <span class="hljs-keyword">var</span> tmp2257 = tmp2256[<span class="hljs-string">&quot;length&quot;</span>];<br>    tmp2021 = tmp2257;<br>    <span class="hljs-keyword">var</span> tmp2258 = <span class="hljs-number">255</span>;<br>    <span class="hljs-keyword">var</span> tmp2259 = tmp2257 &amp; tmp2258;<br>    tmp2023 = tmp2259;<br>    <span class="hljs-keyword">var</span> tmp2260 = <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">var</span> tmp2261 = tmp2257 &gt;&gt; tmp2260;<br>    <span class="hljs-keyword">var</span> tmp2262 = <span class="hljs-number">255</span>;<br>    <span class="hljs-keyword">var</span> tmp2263 = tmp2261 &amp; tmp2262;<br>    tmp2027 = tmp2263;<br>    <span class="hljs-keyword">var</span> tmp2264 = <span class="hljs-string">&quot;&quot;</span>;<br>    tmp2028 = tmp2264;<br>    <span class="hljs-keyword">var</span> tmp2265 = func1086[<span class="hljs-string">&quot;apply&quot;</span>](<span class="hljs-literal">true</span>, [tmp2264]);<br>    tmp2029 = tmp2265;<br>    <span class="hljs-keyword">var</span> tmp2266 = tmp2265[<span class="hljs-string">&quot;length&quot;</span>];<br>    tmp2030 = tmp2266;<br>    <span class="hljs-keyword">var</span> tmp2267 = <span class="hljs-number">255</span>;<br>    <span class="hljs-keyword">var</span> tmp2268 = tmp2266 &amp; tmp2267;<br>    tmp2032 = tmp2268;<br>    <span class="hljs-keyword">var</span> tmp2269 = <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">var</span> tmp2270 = tmp2266 &gt;&gt; tmp2269;<br>    <span class="hljs-keyword">var</span> tmp2271 = <span class="hljs-number">255</span>;<br>    <span class="hljs-keyword">var</span> tmp2272 = tmp2270 &amp; tmp2271;<br>    tmp2036 = tmp2272;<br>    <span class="hljs-keyword">var</span> tmp2273 = tmp2100 ^ tmp2112;<br>    <span class="hljs-keyword">var</span> tmp2274 = tmp2273 ^ tmp2139;<br>    <span class="hljs-keyword">var</span> tmp2275 = tmp2274 ^ tmp2152;<br>    <span class="hljs-keyword">var</span> tmp2276 = tmp2275 ^ tmp2168;<br>    <span class="hljs-keyword">var</span> tmp2277 = tmp2276 ^ tmp2180;<br>    <span class="hljs-keyword">var</span> tmp2278 = tmp2277 ^ tmp2184;<br>    <span class="hljs-keyword">var</span> tmp2279 = tmp2278 ^ tmp2188;<br>    <span class="hljs-keyword">var</span> tmp2280 = tmp2279 ^ tmp2116;<br>    <span class="hljs-keyword">var</span> tmp2281 = tmp2280 ^ tmp2143;<br>    <span class="hljs-keyword">var</span> tmp2282 = tmp2281 ^ tmp2156;<br>    <span class="hljs-keyword">var</span> tmp2283 = tmp2282 ^ tmp2172;<br>    <span class="hljs-keyword">var</span> tmp2284 = tmp2283 ^ tmp2182;<br>    <span class="hljs-keyword">var</span> tmp2285 = tmp2284 ^ tmp2186;<br>    <span class="hljs-keyword">var</span> tmp2286 = tmp2285 ^ tmp2190;<br>    <span class="hljs-keyword">var</span> tmp2287 = tmp2286 ^ tmp2120;<br>    <span class="hljs-keyword">var</span> tmp2288 = tmp2287 ^ tmp2147;<br>    <span class="hljs-keyword">var</span> tmp2289 = tmp2288 ^ tmp2160;<br>    <span class="hljs-keyword">var</span> tmp2290 = tmp2289 ^ tmp2176;<br>    <span class="hljs-keyword">var</span> tmp2291 = tmp2290 ^ tmp2122;<br>    <span class="hljs-keyword">var</span> tmp2292 = tmp2291 ^ tmp2149;<br>    <span class="hljs-keyword">var</span> tmp2293 = tmp2292 ^ tmp2164;<br>    <span class="hljs-keyword">var</span> tmp2294 = tmp2293 ^ tmp2178;<br>    <span class="hljs-keyword">var</span> tmp2295 = tmp2294 ^ tmp2194;<br>    <span class="hljs-keyword">var</span> tmp2296 = tmp2295 ^ tmp2198;<br>    <span class="hljs-keyword">var</span> tmp2297 = tmp2296 ^ tmp2202;<br>    <span class="hljs-keyword">var</span> tmp2298 = tmp2297 ^ tmp2204;<br>    <span class="hljs-keyword">var</span> tmp2299 = tmp2298 ^ tmp377;<br>    <span class="hljs-keyword">var</span> tmp2300 = tmp2299 ^ tmp2210;<br>    <span class="hljs-keyword">var</span> tmp2301 = tmp2300 ^ tmp2217;<br>    <span class="hljs-keyword">var</span> tmp2302 = tmp2301 ^ tmp2128;<br>    <span class="hljs-keyword">var</span> tmp2303 = tmp2302 ^ tmp2135;<br>    <span class="hljs-keyword">var</span> tmp2304 = tmp2303 ^ tmp2222;<br>    <span class="hljs-keyword">var</span> tmp2305 = tmp2304 ^ tmp2226;<br>    <span class="hljs-keyword">var</span> tmp2306 = tmp2305 ^ tmp2230;<br>    <span class="hljs-keyword">var</span> tmp2307 = tmp2306 ^ tmp2232;<br>    <span class="hljs-keyword">var</span> tmp2308 = tmp2307 ^ tmp2235;<br>    <span class="hljs-keyword">var</span> tmp2309 = tmp2308 ^ tmp2239;<br>    <span class="hljs-keyword">var</span> tmp2310 = tmp2309 ^ tmp2243;<br>    <span class="hljs-keyword">var</span> tmp2311 = tmp2310 ^ tmp2247;<br>    <span class="hljs-keyword">var</span> tmp2312 = tmp2311 ^ tmp2259;<br>    <span class="hljs-keyword">var</span> tmp2313 = tmp2312 ^ tmp2263;<br>    <span class="hljs-keyword">var</span> tmp2314 = tmp2313 ^ tmp2268;<br>    <span class="hljs-keyword">var</span> tmp2315 = tmp2314 ^ tmp2272;<br>    tmp2079 = tmp2315;<br>    <span class="hljs-keyword">var</span> tmp2316 = [tmp2100, tmp2112, tmp2222, tmp2139, tmp2152, tmp2168, tmp2239, tmp2180, tmp2184, tmp2226, tmp2188, tmp2116, tmp2143, tmp2230, tmp2232, tmp2156, tmp2172, tmp2235, tmp2182, tmp2186, tmp2190, tmp2120, tmp2147, tmp2160, tmp2247, tmp2176, tmp2122, tmp2149, tmp2164, tmp2178, tmp2194, tmp2198, tmp2243, tmp2202, tmp2204, tmp377, tmp2210, tmp2217, tmp2128, tmp2135, tmp2259, tmp2263, tmp2268, tmp2272];<br>    <span class="hljs-keyword">var</span> tmp2317 = tmp2316[<span class="hljs-string">&quot;concat&quot;</span>];<br>    <span class="hljs-keyword">var</span> tmp2318 = func120[<span class="hljs-string">&quot;apply&quot;</span>](<span class="hljs-literal">true</span>, [tmp2256]);<br>    <span class="hljs-keyword">var</span> tmp2319 = func120[<span class="hljs-string">&quot;apply&quot;</span>](<span class="hljs-literal">true</span>, [tmp2265]);<br>    <span class="hljs-keyword">var</span> tmp2320 = [tmp2315];<br>    <span class="hljs-keyword">var</span> tmp2321 = tmp2317[<span class="hljs-string">&quot;apply&quot;</span>](tmp2316, [tmp2318, tmp2319, tmp2320]);<br>    tmp2085 = tmp2321;<br>    <span class="hljs-keyword">var</span> tmp2322 = func1382[<span class="hljs-string">&quot;apply&quot;</span>](<span class="hljs-literal">true</span>, [tmp2099]);<br>    <span class="hljs-keyword">var</span> tmp2323 = func1538[<span class="hljs-string">&quot;apply&quot;</span>](<span class="hljs-literal">true</span>, [tmp2108]);<br>    tmp2322 += tmp2323;<br>    <span class="hljs-keyword">var</span> tmp2324 = <span class="hljs-title class_">String</span>[<span class="hljs-string">&quot;fromCharCode&quot;</span>];<br>    <span class="hljs-keyword">var</span> tmp2325 = <span class="hljs-number">121</span>;<br>    <span class="hljs-keyword">var</span> tmp2326 = tmp2324[<span class="hljs-string">&quot;apply&quot;</span>](<span class="hljs-title class_">String</span>, [tmp2325]);<br>    <span class="hljs-keyword">var</span> tmp2327 = <span class="hljs-title class_">String</span>[<span class="hljs-string">&quot;fromCharCode&quot;</span>];<br>    <span class="hljs-keyword">var</span> tmp2328 = tmp2327[<span class="hljs-string">&quot;apply&quot;</span>];<br>    <span class="hljs-keyword">var</span> tmp2329 = tmp2328[<span class="hljs-string">&quot;apply&quot;</span>](tmp2327, [<span class="hljs-literal">true</span>, tmp2321]);<br>    <span class="hljs-keyword">var</span> tmp2330 = ee[<span class="hljs-string">&quot;apply&quot;</span>](<span class="hljs-literal">true</span>, [tmp2326, tmp2329]);<br>    tmp2322 += tmp2330;<br>    tmp2086 = tmp2322;<br>    <span class="hljs-keyword">var</span> tmp2331 = <span class="hljs-string">&quot;s4&quot;</span>;<br>    <span class="hljs-keyword">var</span> tmp2332 = re[<span class="hljs-string">&quot;apply&quot;</span>](<span class="hljs-literal">true</span>, [tmp2322, tmp2331]);<br>    <span class="hljs-keyword">return</span> tmp2332;<br></code></pre></td></tr></table></figure><p>大概就是这样 一共三千多行 可以很明白的看到他的执行逻辑了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>他的麻烦点就是变量作用域问题 其他的按部就班的按照他的代码逻辑去改成ast节点的操作就行了</p><h1 id="欢迎关注我的公众号-谢谢大家"><a href="#欢迎关注我的公众号-谢谢大家" class="headerlink" title="欢迎关注我的公众号 谢谢大家"></a>欢迎关注我的公众号 谢谢大家</h1><p><img src="/2024/05/24/dy-decompile/img_8.png" alt="img_8.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>反编译小红书vmp 代码</title>
    <link href="/2024/05/18/decompile-xhs/"/>
    <url>/2024/05/18/decompile-xhs/</url>
    
    <content type="html"><![CDATA[<p>目前在JS 方面常见的保护方式</p><ol><li>代码混淆 类似ob混淆 jsfuck 这种的</li><li>vmp</li></ol><p>vmp 目前还是比较常见的 国内来说<br>腾讯 小红书 抖音 知乎 都有vmp了</p><p>我之前的解决办法 就是在关键节点打日志<br>然后看输出日志分析  经常有几万行的日志<br>看的很蛋疼  </p><p>所以来研究下怎么用 ast 来还原vmp 代码  </p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><h1 id="需要你了解ast常⽤节点的构成和怎么生成对应的ast节点"><a href="#需要你了解ast常⽤节点的构成和怎么生成对应的ast节点" class="headerlink" title="需要你了解ast常⽤节点的构成和怎么生成对应的ast节点"></a>需要你了解ast常⽤节点的构成和怎么生成对应的ast节点</h1><h3 id="第一步-看vmp代码结构"><a href="#第一步-看vmp代码结构" class="headerlink" title="第一步 看vmp代码结构"></a>第一步 看vmp代码结构</h3><p>vmp 代码一般都会在一个循环里 还有个长的数组 代表的要执行哪个指令</p><p><img src="/source/_posts/px-touch/1.png" alt="1.png"><br>这里b 其实就是长数组 代表走的指令了<br>这个d 其实是全局的常量 后面执行的时候会从这里取值<br><img src="/0.png" alt="0.png"><br>经过处理后 就变长了11119长度 五列的数组 其中0位置的值就代表了 要走哪条指令</p><p><img src="/source/_posts/1.png" alt="1.png">  </p><p>_ace_aec23 是一个67 长度的list 里面都是函数<br>这里的 指令是4  代表要走 _ace_aec23 中下标4的函数<br>他的执行形式就介绍完了 </p><h3 id="第二步-看看一些关键的变量"><a href="#第二步-看看一些关键的变量" class="headerlink" title="第二步 看看一些关键的变量"></a>第二步 看看一些关键的变量</h3><p><img src="/2024/05/18/decompile-xhs/img_2.png" alt="img_2.png"><br>在开始之前定义了一些 list 和object<br>其中 比较有用的是 _ace_dcca5 栈  和 _ace_66 变量池<br>在加上 前面的常量池 就够了 别的值的定义用到时 在分析  </p><h3 id="第三步-开始反编译"><a href="#第三步-开始反编译" class="headerlink" title="第三步 开始反编译"></a>第三步 开始反编译</h3><p>我的理解中 反编译vmp<br>就是让vmp流程中的所有操作都变成对ast 节点的操作<br>演示一下大概就明白了<br>现在开始让函数自己进行执行<br>当前 i &#x3D; 1  opcode &#x3D; [12,6,0,6,1] 就是要执行67个函数中下标为12的函数<br><img src="/2024/05/18/decompile-xhs/img_3.png" alt="img_3.png"><br>很明显 这里就是让 a部分 加上b 部分  在进入_ace_1ae3c函数<br><img src="/2024/05/18/decompile-xhs/img_4.png" alt="img_4.png"><br>赋值给 ace_dcca5 这个栈 一般都是赋值到下标为0 的地方<br>那么下面来看怎么处理这个节点</p><pre><code class="javascript">            case 12:                let v ;                let l = getArgs(p0, p1) // 获取到left节点的值                let r = getArgs(p2, p3) // 获取right节点的值                // 这里的代码是为了优化反编译结果 连续生成一个字符串的地方                if (types.isStringLiteral(l) &amp;&amp; types.isStringLiteral(r)) &#123;                    // 面对的是 l和 r 都是字符串                    v = l.value + r.value;                &#125; else if (typeof l === &#39;string&#39; &amp;&amp; types.isStringLiteral(r)) &#123;                    // 面对的是 l 是一个变量节点 &amp;&amp; r === 字符串                    v = l + r.value                &#125; else &#123;                    // 其他方法就生成一个 运算符的表达式                    v = types.binaryExpression(&#39;+&#39;, l, r)                    // body.push(newVaria(v, res))                &#125;                _ace_dcca5[0] = v;</code></pre><p>节点的处理就大同小异的<br>关键是处理 if-else while break continue try-catch-finally  已经 新函数的节点  </p><p>下面来看看 新函数怎么处理  首先找到vmp中处理一个新函数的地方</p><pre><code class="javascript">// 当指令为61的时候 就是新定义一个函数function(p0, p1, p2, p3, p4, p5, p6) &#123;    // 切分新的指令list    var _ace_404c = _ace_75a05.slice(_ace_34d1(p0, p1), _ace_34d1(p2, p3) + 1)    // 复制当前的变量池  , _ace_71423 = _ace_66;    // 他这里是将一个匿名函数赋值到栈里了    // 我们的处理就是直接反编译出来这个函数 将函数节点赋值给栈    _ace_1ae3c(function() &#123;        // 一些准备工作 保持新函数外层一些关键点的值不跑偏        _ace_420ea = &#123;            _ace_5ee37: this || _ace_4752e,            _ace_84c79: _ace_420ea,            _ace_b0594: arguments,            _ace_eb1d: _ace_71423        &#125;;        // 进入循环 执行函数内的vmp 代码        _ace_99485(_ace_404c);        // 将这个_ace_420ea的值还原回去         _ace_420ea = _ace_420ea._ace_84c79;        // 如果在结果时栈0 有值 就是函数有返回值        print(&#39;res&#39;,_ace_8cba0(_ace_dcca5[0]))        return _ace_8cba0(_ace_dcca5[0]);    &#125;, _ace_be07c, _ace_be07c, 0);    return ++p4;&#125;</code></pre><p>看反编译代码吧 </p><pre><code class="javascript">case 61:    // 函数指令必须从30 开始 处理栈什么的    // 以22结束 还原栈    // 解析为一个函数    let fl = getArgs(p0, p1); // 函数开始位置    let fr = getArgs(p2, p3); // 函数结束位置    let newCode = allcode.slice(fl, fr + 1);// 切分一个新函数指令list出来    let newBody = new MyArray(); // 新建一个函数内部的ast代码存放的body    let v61 = newVar(true)    let old_ace_dcca5 = _ace_dcca5.slice(); // 像他的源码 一样备份一些东西    let old_ace_a3718 = _ace_a3718;    let old_ace_66 = _ace_66;    let new_ace_dcca5 = [0, 0, 0, 0, 0, 0]    let new_ace_66 = &#123;&#125;;    new_ace_66._ace_66 = _ace_66    // 开始执行新函数 newCode 的指令了    let func47Res = main(newCode, 0, newCode.length - 1, newBody,new_ace_dcca5 ,        new_ace_66, -1,-1,[])    try &#123;        // 如果函数有返回值 就加个return 语句        if (types.isIdentifier(new_ace_dcca5[0]) ) &#123;            newBody.push(types.returnStatement(new_ace_dcca5[0]))        &#125;    &#125; catch (e) &#123;        debugger    &#125;    // 执行完跳出循环后 定义一个新函数    body.push(types.functionDeclaration(v61, [], types.blockStatement(newBody.data)));    // 函数变量放到栈中    _ace_dcca5[0] = v61    // 还原之前备份的    _ace_dcca5 = old_ace_dcca5.slice();    _ace_a3718 = old_ace_a3718;    _ace_66 = old_ace_66;    break</code></pre><p>反编译结果大概就这样<br><img src="/2024/05/18/decompile-xhs/img_6.png" alt="img_6.png">  </p><p>整体逻辑就是这样的 去看源码中每个指令位置坐了什么事情 把他转成ast节点 做同样的事情<br>就出来了  </p><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="/2024/05/18/decompile-xhs/img_7.png" alt="img_7.png"><br>这个反编译完1880行 而且可以明显的看到 _webmsxyw 这个函数被挂载到了window上了<br>我的理解中 vmp反编译的难点 多数在于循环中 特别是有break和continue的循环 需要非常仔细的去跟它的源码  </p><h3 id="欢迎关注我的公众号-谢谢大家"><a href="#欢迎关注我的公众号-谢谢大家" class="headerlink" title="欢迎关注我的公众号 谢谢大家"></a>欢迎关注我的公众号 谢谢大家</h3><p><img src="/2024/05/18/decompile-xhs/img_8.png" alt="img_8.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JA3 TLS 指纹新选择~编译chromium网络库记录</title>
    <link href="/2024/05/07/cronet/"/>
    <url>/2024/05/07/cronet/</url>
    
    <content type="html"><![CDATA[<p>目前在跑akamai中遇到一个网站 经常被403</p><p>尝试过很多东西 怀疑是ja3指纹的问题</p><p>在github搜索到有一些人编译的cronet<br>是chromium中的网络请求库抽离出来的动态库</p><h3 id="官方的解释"><a href="#官方的解释" class="headerlink" title="官方的解释"></a>官方的解释</h3><p>Cronet是Chromium网络引擎对不同操作系统做的封装,<br>实现了移动端应用层、表示层、会话层协议，<br>支持HTTP1&#x2F;2、SPDY、QUIC、WebSocket、FTP、DNS、TLS等协议标准。<br>支持Android、IOS、Chrome OS、Fuchsia，<br>部分支持Linux、MacOS、Windows桌面操作系统。<br>实现了Brotli数据压缩、预连接、DNS缓存、session复用等策略优化<br>以及TCP fast open等系统优化</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><blockquote><p>他内部支持完整的tls层 不需要依赖openssl 是完全和chrome浏览器一样的ja3指纹<br>可以降低被识别的可能性</p></blockquote><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h4 id="1-拉代码"><a href="#1-拉代码" class="headerlink" title="1. 拉代码"></a>1. 拉代码</h4><p>首先需要拉下来chromium的源码<br>我使用的是 22.04.1-Ubuntu x64 的linux 系统</p><hr><h2 id="chromium官方文档-看官方文档就好了"><a href="#chromium官方文档-看官方文档就好了" class="headerlink" title="chromium官方文档 看官方文档就好了"></a><a href="https://chromium.googlesource.com/chromium/src/+/main/docs/linux/build_instructions.md">chromium官方文档 看官方文档就好了</a></h2><h4 id="2-生成编译文件"><a href="#2-生成编译文件" class="headerlink" title="2. 生成编译文件"></a>2. 生成编译文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">gn gen out/Cronet --args=&#x27;is_debug=false&#x27;<br>is_debug=false 是release模式 都编译进一个so里<br></code></pre></td></tr></table></figure><h4 id="3-开始编译"><a href="#3-开始编译" class="headerlink" title="3. 开始编译"></a>3. 开始编译</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ninja -C out/Cronet/ cronet_package<br>如果不指定后面的cronet_package 就会编译chromium浏览器<br></code></pre></td></tr></table></figure><p><img src="/2024/05/07/cronet/by.png" alt="by.png"><br>大概四千多个文件 编译还是挺快的</p><h4 id="4-编译结果"><a href="#4-编译结果" class="headerlink" title="4. 编译结果"></a>4. 编译结果</h4><p><img src="/2024/05/07/cronet/out.png" alt="out.png"></p><h4 id="5-使用"><a href="#5-使用" class="headerlink" title="5. 使用"></a>5. 使用</h4><p>很多语言都可以调用这个动态库</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h4 id="这是chrome浏览器的"><a href="#这是chrome浏览器的" class="headerlink" title="这是chrome浏览器的"></a>这是chrome浏览器的</h4><p><img src="/2024/05/07/cronet/chrome124.png" alt="chrome124.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;user_agent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ja3_hash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;49f70b3e88f1c16efb129287356f5d8f&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ja3_text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,27-5-10-13-35-18-65037-0-51-11-45-65281-16-17513-23-43,25497-29-23-24,0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ja3n_hash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4c9ce26028c11d7544da00d3f7e4f45c&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ja3n_text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,0-5-10-11-13-16-18-23-27-35-43-45-51-17513-65037-65281,25497-29-23-24,0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;akamai_hash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1078ca4bfd193d5da4914b977eec979e&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;akamai_text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1:65536;2:0;4:6291456;6:262144;64234:3439937096|15663105|0|m,a,s,p&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="这是动态库请求的"><a href="#这是动态库请求的" class="headerlink" title="这是动态库请求的"></a>这是动态库请求的</h4><p><img src="/2024/05/07/cronet/cr.png" alt="cr.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;user_agent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Mobile Safari/537.36&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ja3_hash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;18b44992750235fb3f1a5c1c23b3158e&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ja3_text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,5-45-17513-27-43-65037-13-65281-51-10-18-0-23-11-35-16,25497-29-23-24,0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ja3n_hash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4c9ce26028c11d7544da00d3f7e4f45c&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ja3n_text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,0-5-10-11-13-16-18-23-27-35-43-45-51-17513-65037-65281,25497-29-23-24,0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;akamai_hash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;52d84b11737d980aef856699f885ca86&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;akamai_text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1:65536;2:0;4:6291456;6:262144|15663105|0|m,a,s,p&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>JA3_hash 不一致是因为新的chrome会随机扩展顺序导致的</p><p>akamai 测试上面的站成功率从20%多提升到90% </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ReCaptchaV2</title>
    <link href="/2024/03/29/ReCaptchaV2/"/>
    <url>/2024/03/29/ReCaptchaV2/</url>
    
    <content type="html"><![CDATA[<h2 id="谷歌ReCaptchaV2逆向"><a href="#谷歌ReCaptchaV2逆向" class="headerlink" title="谷歌ReCaptchaV2逆向"></a>谷歌ReCaptchaV2逆向</h2><p>目标网站：</p><p>aHR0cHM6Ly9yZWNhcHRjaGEubmV0L3JlY2FwdGNoYS9hcGkyL2RlbW8&#x3D;</p><p>遇到这个验证码 尝试破解一下</p><p><img src="/0.png"></p><p>点击框框后 会发送一个 reload 的请求</p><p><img src="/source/_posts/1.png" alt="img.png"></p><p>内容为字节 实际就是protobuf编码格式</p><p>是一个26个数组的格式 大概就长这样 好多没有值的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bytearray(b&#x27;Hq4JZivxx1Tzodj&#x27;)&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bytearray(b&#x27;03AFcWeA4ixA_LKGmUjwD6l1eA&#x27;)&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bytearray(b&#x27;!oaegp6IKAAxJ-mHS7SwRGhyw&#x27;)&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;5&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bytearray(b&#x27;-787762967&#x27;)&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bytearray(b&#x27;fi&#x27;)&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;14&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bytearray(b&#x27;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-&#x27;)&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;16&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bytearray(b&#x27;0SwpSjrxO6h8&#x27;)&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;20&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bytearray(b&#x27;tbMSwxMzgsMTxGNoYS5uZXQiXV0&#x27;)&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;25&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bytearray(b&#x27;W10&#x27;)&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>就需要详细分析一下不同位置值的含义了<br>1 是js代码代号?<br>2 是前面返回的 captcha-token<br>4 是vmp 返回的结果<br>5和16 是同一字符串返回的不同结果 就是下面这组75个数组转的字符串</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;61e2&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;xxxx&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;xxx=&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-number">1632</span><span class="hljs-punctuation">,</span><span class="hljs-number">576</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-number">3553</span><span class="hljs-punctuation">,</span><span class="hljs-number">564</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;x&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-number">3838</span><span class="hljs-punctuation">,</span><span class="hljs-number">586</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;bFA&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;\&quot;[]\&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-number">3215</span><span class="hljs-punctuation">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;Chromium&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;116&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;x,&quot;</span><span class="hljs-number">24</span><span class="hljs-string">&quot;],[&quot;</span>xe<span class="hljs-string">&quot;,&quot;</span><span class="hljs-number">116</span><span class="hljs-string">&quot;]],0,&quot;</span>xx<span class="hljs-string">&quot;],[],null,[&quot;</span>xxx<span class="hljs-string">&quot;,148819652,0]]</span><br></code></pre></td></tr></table></figure><p>具体内容代表什么含义就得自己扣了 挺费劲的<br>20 25 也是同一字符串返回的 </p><p>最终需要去请求 verify  去验证一下子</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-string">&quot;uvresp&quot;</span><span class="hljs-punctuation">,</span><br>  返回了这就是过啦<br>  <span class="hljs-string">&quot;03AFcWeA7wPxIdQ1obebG-cogi-UAnu_mvlNamBHjKl2n-Kx9PMgH-y2OB-zZtt2gIBNr8BaF4Zeh1yhk76QRB9OthA8MrCGFxPGbjj4wxxuwlvGe8qJ48ivLWYez6FFzjWGnQgnmy-cwmImJEvhZ15issuulYlJ2YWHFfUskO4sv5uxxxxxxxxxxxadsasdawdawdaaiuawgdfiuagwduygawiuydguyagwdiuyawdWwi7gIxL9x76oyCoy1gfT9ekaiEBrI7MgoMnrHp1UfZywxjDCWQBN3i8dpVT6Ie-FR8YsjF31aUHUoMREcNs6ir2Jg32dZwpjeIYta2705Dntv4b4jYPUBIf8JT_QddxmaLjzN_Z8-YmTd37wDJfbJA_1iWFAyyUdLPe23LnnaxXEKy4rhh9iISfdvNCCGLbZ41kwUPyTbanzbzlD1FC_O7xfZbAyLhZCH5Amb7OGlyG56PszwjuobtWTda0TvHdZaDfuTLoN_sZ_e74GBtTGMmIOJEf2XPBRWUdUQMbVF4v4rT6Dg8t3Uo-eKzQ&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">120</span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;09AH4jZCS5DAaG3KfUzYtwi_FJiLwPBawkdhajkwhdjkahwdjkawdVEQgmCIOS_g5ORDyMC7lD19iTVZdnGpbnMl7g&quot;</span><span class="hljs-punctuation">]</span><br><br></code></pre></td></tr></table></figure><p>代码提交结果<br><img src="/2024/03/29/ReCaptchaV2/img_2.png" alt="img_2.png"></p><p>这个难点在于  postMessage 和onmessage 传递的参数 还有异步函数<br>找值比较费劲</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>perimeterx px3  按压验证码 分析</title>
    <link href="/2023/12/14/px-touch/"/>
    <url>/2023/12/14/px-touch/</url>
    
    <content type="html"><![CDATA[<h1 id="perimeterx-px3-按压验证码-分析"><a href="#perimeterx-px3-按压验证码-分析" class="headerlink" title="perimeterx px3  按压验证码 分析"></a>perimeterx px3  按压验证码 分析</h1><p>接上文的 按压验证码分析  </p><p><img src="/source/_posts/px-touch/1.png" alt="验证码样式">  </p><hr><h2 id="开始进入流程分析"><a href="#开始进入流程分析" class="headerlink" title="开始进入流程分析"></a>开始进入流程分析</h2><h4 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h4><pre><code class="hljs">看着大概请求和无感时差不多 实际也是一样的初始化和按压验证的数据 都是从无感那边的js 发出的甚至初始化前两部验证的东西都一样![初始化验证](2.png)<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;t&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;PX12095&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;PX11645&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://url&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;PX12207&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;PX12458&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;MacIntel&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;PX11902&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;PX11560&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">198</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;PX12248&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3600</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;PX11385&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1702565337810</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;PX12280&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1702565337831</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;PX11496&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;6fa01e60-9997-11ee-ba04-19528ba2f4ae&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;PX12564&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;PX12565&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;PX11379&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;PX12307&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;PX11745&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;PX11668&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pxhc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;PX12348&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure>这就是初始化的数据 payload 原文  他的返回会多五组数据<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk">[<br>    <span class="hljs-string">&quot;o11o11|ed3f124d-9a8f-11ee-a58c-3d04af16cd30&quot;</span>, <span class="hljs-regexp">//</span> sid<br>    <span class="hljs-string">&quot;o111ooo1|1702565344671&quot;</span>, <span class="hljs-regexp">//</span> ts<br>    <span class="hljs-string">&quot;111o1o|10455894763209661329&quot;</span>,<br>    <span class="hljs-string">&quot;11o111|0bf0a5e848f4163462cfc8e37fdeb630b409bb7f0d197243e05fa4533e8980e5&quot;</span>,<br>    <span class="hljs-string">&quot;o1oo11|1|55a9d403f63f511ca23d69056784b7bf6fc124b64d4eb20cf93fc42ce559e|d143f3cb6974dd161c0eb1562b66e7d4d8e6c42e0112beb9002403d7eb173881|12|false&quot;</span>,<br>    <span class="hljs-string">&quot;1o1oo1|ccc:0,ccc:0&quot;</span>,<br>    <span class="hljs-string">&quot;111oo1|rf|60|1&quot;</span>,<br>    <span class="hljs-string">&quot;o11o11oo|ed3f179a-9a8f-11ee-a58c-3d04af16cd30|true&quot;</span>,<br>    <span class="hljs-string">&quot;11oo1o|1|ed43d2f0-9a8f-11ee-8a5b-4b4fa8298b06|6627| 201136fc0b1100a0b92d1dda0b11993f3ba6c4ab5a8d0a49e82abf8505eb37ecd8367c28c6304e775b8069bbb46a2373120dadb696c76674123110f36fb11258_2&gt;&lt;3|0|NA&quot;</span>,<br>    <span class="hljs-string">&quot;o111oooo|9155&quot;</span>,<br>    <span class="hljs-string">&quot;o1o111|cu&quot;</span>,<br>    <span class="hljs-string">&quot;111oo1|cc|60|U2FtZVNpdGU9TGF4Ow==&quot;</span>,<br>    <span class="hljs-string">&quot;111oo1|fp|60|1&quot;</span>,<br>    <span class="hljs-string">&quot;1oooo1|clthbo55gct9ocem3ogg&quot;</span>,<br>    <span class="hljs-string">&quot;o1oo1o|ed3efc06-9a8f-11ee-a58c-b6abdf9e29d7|31536000|true&quot;</span><br>]<br></code></pre></td></tr></table></figure>分别对应不同的用途用来后续的校验</code></pre><h4 id="2-第一步环境校验"><a href="#2-第一步环境校验" class="headerlink" title="2. 第一步环境校验"></a>2. 第一步环境校验</h4><p>   这步和无感的基本一样<br>   就不细说了<br>   都是PX11590的类型</p><h4 id="3-长按-按压验证"><a href="#3-长按-按压验证" class="headerlink" title="3. 长按 按压验证"></a>3. 长按 按压验证</h4><p><img src="/2023/12/14/px-touch/3.png"><br>这步发的数据 有就亿点点多了  </p><p><img src="/2023/12/14/px-touch/4.png" alt="Alt text"></p><p>需要按类型去说<br>PX11547<br>对应的基本是 canvas 和gpu 相关信息</p><p><img src="/2023/12/14/px-touch/px11547.png"></p><p>PX12123<br>鼠标按压的x y 值 和 一些其他<br><img src="/2023/12/14/px-touch/px12123.png"></p><p>PX12419<br>鼠标相关的一些东西 算是简短数据<br><img src="/2023/12/14/px-touch/px12419.png"></p><p>PX561<br>这是最关键的key了 这个对了就过了<br><img src="/2023/12/14/px-touch/px561.png"><br>就靠自己分析了 没法说了</p><p>PX11782<br>这没啥好说的 没啥玩意儿<br><img src="/2023/12/14/px-touch/px11782.png" alt="Alt text"></p><h2 id="校验结果"><a href="#校验结果" class="headerlink" title="校验结果"></a>校验结果</h2><p><img src="/2023/12/14/px-touch/res.png" alt="Alt text"></p><p>o11o111o 这个值 0就是过 -1 就是没过</p><h1 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h1><p>带一个代码请求<br><img src="/2023/12/14/px-touch/js.png" alt="Alt text"></p><p>对了 这里面有 wasm 去计算一个值<br>就在 px561 中 </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br><span class="hljs-keyword">let</span> r = call<span class="hljs-constructor">_12590_12610(<span class="hljs-params">this</span>.<span class="hljs-params">uuid</span>, <span class="hljs-params">this</span>.<span class="hljs-params">hash</span>, <span class="hljs-params">this</span>.<span class="hljs-params">hash2</span>, <span class="hljs-params">this</span>.<span class="hljs-params">hashv</span>)</span><br><span class="hljs-keyword">let</span> px1132 = r<span class="hljs-literal">[<span class="hljs-number">0</span>]</span> <span class="hljs-comment">// hash计算值 </span><br><span class="hljs-keyword">let</span> px12590 = r<span class="hljs-literal">[<span class="hljs-number">1</span>]</span> <span class="hljs-comment">// wasm 1</span><br><span class="hljs-keyword">let</span> px12610 = r<span class="hljs-literal">[<span class="hljs-number">2</span>]</span> <span class="hljs-comment">// wasm 2</span><br><br><br><span class="hljs-string">&quot;PX12589&quot;</span>: <span class="hljs-string">&quot;succeeded&quot;</span>, <span class="hljs-comment">// wasm 相关 先写死吧</span><br><span class="hljs-string">&quot;PX12590&quot;</span>: px12590,<br><span class="hljs-string">&quot;PX12610&quot;</span>: px12610, <span class="hljs-comment">// end  wasm 耗时</span><br><span class="hljs-string">&quot;PX12504&quot;</span>: randint(<span class="hljs-number">12008</span>, <span class="hljs-number">15008</span>),<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>perimeterx px3 无感 分析</title>
    <link href="/2023/11/15/px/"/>
    <url>/2023/11/15/px/</url>
    
    <content type="html"><![CDATA[<h1 id="perimeterx-px3-分析"><a href="#perimeterx-px3-分析" class="headerlink" title="perimeterx px3 分析"></a>perimeterx px3 分析</h1><p>熟悉的环节  😒<br>工作需要搞一下<br>只是 无感<br>目标网站</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">aHR0cHM6Ly93d3cuc3Bpcml0LmNvbS8</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><h1 id="标志"><a href="#标志" class="headerlink" title="标志"></a>标志</h1><p><img src="/2023/11/15/px/image0.png" alt="Alt text"><br><img src="/2023/11/15/px/image1.png" alt="Alt text"></p><p>会有好多这样的请求 基本就是px了</p><h2 id="参数加解密"><a href="#参数加解密" class="headerlink" title="参数加解密"></a>参数加解密</h2><p><img src="/2023/11/15/px/image2.png" alt="Alt text"><br>会看到 payload 像是base64<br>实际是base64编码后再次加密的结果<br><img src="/2023/11/15/px/image.png" alt="Alt text"><br>追踪他的栈 会发现 是在这里生成的代码<br><img src="/2023/11/15/px/image-1.png" alt="Alt text"><br><img src="/2023/11/15/px/image-2.png" alt="Alt text"><br>同时会发现 他的代码中有很多混淆的字符串<br>可以通过 AST 处理一下<br><img src="/2023/11/15/px/image-3.png" alt="Alt text"><br>得到这种容易读懂的代码 在进行分析<br>先来看看 payload 是怎么加密的</p><p><img src="/2023/11/15/px/image3.png" alt="Alt text"><br>分析一下 就是 先把json字符串的每个字节 ^ 50 再转base64<br>然后再用uuid 获取一个字符串<br>再把第一步的 base64 分割插入 uuid 的字符串<br>再处理一下 就是结果的payload 了  </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&#123;<br>    <span class="hljs-string">&quot;do&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;ob&quot;</span>: <span class="hljs-string">&quot;B1lZWQcHWQcUNxgQDA0UW1tYFFsMUA1ZXFBRXFkMXQpdXwsJXF0LXlhdC1FdDl4MUVENCl9aUFlaXVpdCg4NX15aX19RXglcXVxQDQwMWlBcUF9SDREiWAk/WQQLWzoACjApAScCLVslLCkQJSwtWCc8PR8lLAxRFBwaHQ0UW1hYFhYWFllZWQdZBxRZUFpfWVlcWlxbWFFaXFheWF5bWBYWFhZZWVkHB1kUCwsUXlgUPVouHDI+JhgMLz1RPC8uXCcfVVUWFhYWB1lZB1lZBwcUXVxeUQ1QDl5FUFxaX0VZWQ0NRQpfXVhFW1gJXVkMCQ5QClBbFBwaHQ0WFhYWB1kHB1kHFAoNDFoLWVFYRVBcWl5FWVkNDUUJUV1YRQoMWF1QXAsNX14JURRbWV1bXlhYWBQcGh0NFhYWFgdZB1lZWRQLHRYWFhZZWQdZWVkUX1haCglbXwoLUQsJCl0NCloNXFgJDlsJC1leXl0OClpeUVwOUV1aCwpZWV8JXA1YXApcXgxYX1AOXF1cWQwKChYWFhYHWVkHWVkUXVxeUQ1dXQ1FUFxaX0VZWQ0NRQpfXVhFW1gJXVkMCQ5QClBbFhYWFllZWQcHWRQaDhReWBRZFhYWFgdZWVkHBwdZFFlfWFhZWFlcUV1YWF4WFhYWB1lZWQcHBwcUWVpRXxYWFhZZBwcHB1kUCwQJBhkcDwRdXRteWlwcGwcOXA8=&quot;</span><br>&#125;<br><span class="hljs-string">``</span><span class="hljs-string">`  </span><br><span class="hljs-string">返回结果这里看到的 ob 也是加密的  </span><br><span class="hljs-string">这个就比较简单了  </span><br><span class="hljs-string">base64 解码后 在 ^ (版本号 % 128)  </span><br><span class="hljs-string">当前版本号是 v8.7.2 就是 (872 % 128)   </span><br></code></pre></td></tr></table></figure><p>[<br> “o1oo1o|957a2621-8427-11ee-bdb4-077351f73529|31536000|true”,<br> “11o111|79bce223313698a7586198b6ab78dc0d56e6f334b3d98ab8d36460a19a6fddda”,<br> “o11o11oo|96206fb1-8427-11ee-a5c7-ea6a94989dfc|true”,<br> “o1o111|cu”,<br> “o111ooo1|1700101605261”,<br> “111oo1|cc|60|U2FtZVNpdGU9TGF4Ow&#x3D;&#x3D;”,<br> “111o1o|15664779070372902995”,<br> “o11o11|96206bfe-8427-11ee-a5c7-ea6a94989dfc”,<br> “1oooo1|clanrpe6tl5m24stojmg”,<br> “o111oooo|292”,<br> “o111oo1o|_pxde|330|0dee1113d487bf7d78682188d959d13981ba17dcd2af8d264f7d5e6b6c9b2475:eyJ0aW1lc3RhbXAiOjE3MDAxMDE2MDUyNjF9|true|300”<br>]</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">这些值 就是后面参与计算的 一些值了  <br><span class="hljs-number">1</span>ooo<span class="hljs-meta">o1</span> 开头的这个值 代表他不同的计算逻辑   <br>![Alt text]<span class="hljs-comment">(image5.png)</span>  <br>在代码中都可以看到    <br>初始化完成后 就要去校验浏览器环境了   <br></code></pre></td></tr></table></figure><p>{<br>    “t”: “PX11590”,<br>    “d”: {<br>        “PX11431”: “1700101605261”,<br>        “PX12454”: 292,<br>        “PX11701”: “15664779070372902995”,<br>        “PX11529”: 80457564,<br>        “PX11555”: 4294705152,<br>        “PX11833”: 61616059,<br>        “PX11840”: “Thu Nov 16 2023 10:26:45 GMT+0800 (China Standard Time)”,<br>        “PX12573”: “58baea05”,<br>        “PX11804”: “c93b435e78883931c991675c088777e3”,<br>        “PX12118”: “clanrpe6tl5m24stojmg”,<br>        “PX11746”: “71f68cf1450d0b31d397705dad72f593”,<br>        “PX11371”: “c73a8f6757304c8bee54230a32cf34ef”,<br>        “PX12501”: “8f5550519283f7b1591b0ea95f4e98ca”,<br>        “PX12169”: 3,<br>        “PX11902”: 1,<br>        “PX11560”: 12110,<br>        “PX11332”: 1700101626566,<br>        “PX12248”: 3600,<br>        “PX11385”: 1700101604530,<br>        “PX12280”: 1700101627175,<br>        “PX11496”: “03642cf8-0fe5-4c04-b842-1334ee0458f4”,<br>        “PX12330”: “109|66|66|70|80”,<br>        “PX11705”: 1182,<br>        “PX11938”: true,<br>        “PX11602”: true,<br>        “PX12021”: “false”,<br>        “PX12421”: “false”,<br>        “PX12124”: 1,<br>        “PX11609”: 1,<br>        “PX12291”: “”,<br>        “PX11881”: [<br>            “loadTimes”,<br>            “csi”,<br>            “app”<br>        ],<br>        “PX12207”: 0,<br>        “PX11538”: 2,<br>        “PX11984”: “TypeError: Cannot read properties of null (reading ‘0’)\n    at de (<a href="https://client.px-cloud.net/PXVb73hTEg/main.min.js:796:13)/n">https://client.px-cloud.net/PXVb73hTEg/main.min.js:796:13)\n</a>    at Eo (<a href="https://client.px-cloud.net/PXVb73hTEg/main.min.js:2294:31)/n">https://client.px-cloud.net/PXVb73hTEg/main.min.js:2294:31)\n</a>    at Co (<a href="https://client.px-cloud.net/PXVb73hTEg/main.min.js:2316:23)/n">https://client.px-cloud.net/PXVb73hTEg/main.min.js:2316:23)\n</a>    at <a href="https://client.px-cloud.net/PXVb73hTEg/main.min.js:2152:9">https://client.px-cloud.net/PXVb73hTEg/main.min.js:2152:9</a>“,<br>        “PX11645”: “<a href="https://www.spirit.com/">https://www.spirit.com/</a>“,<br>        “PX11597”: [],<br>        “PX12023”: “”,<br>        “PX11337”: false,<br>        “PX12544”: true,<br>        “PX12589”: “succeeded”,<br>        “PX11524”: true,<br>        “PX11843”: 1920,<br>        “PX11781”: 1080,<br>        “PX12121”: 1920,<br>        “PX12128”: 1055,<br>        “PX12387”: “1920X1080”,<br>        “PX12003”: 24,<br>        “PX11380”: 24,<br>        “PX11494”: 906,<br>        “PX12411”: 853,<br>        “PX12443”: 0,<br>        “PX12447”: 0,<br>        “PX11533”: true,<br>        “PX12079”: false,<br>        “PX12278”: true,<br>        “PX11694”: false,<br>        “PX12294”: false,<br>        “PX12514”: true,<br>        “PX12515”: “TypeError: Cannot read properties of undefined (reading ‘width’)”,<br>        “PX12516”: “webkit”,<br>        “PX12517”: 33,<br>        “PX12518”: false,<br>        “PX12545”: false,<br>        “PX12593”: false,<br>        “PX12595”: “AudioData.SVGAnimatedAngle.SVGMetadataElement”,<br>        “PX12069”: [<br>            “PDF Viewer”,<br>            “Chrome PDF Viewer”,<br>            “Chromium PDF Viewer”,<br>            “Microsoft Edge PDF Viewer”,<br>            “WebKit built-in PDF”<br>        ],<br>        “PX12286”: 5,<br>        “PX11576”: true,<br>        “PX12318”: true,<br>        “PX11384”: true,<br>        “PX11886”: true,<br>        “PX11583”: “en-US”,<br>        “PX12458”: “MacIntel”,<br>        “PX11681”: [<br>            “en-US”<br>        ],<br>        “PX11754”: “UA”,<br>        “PX12037”: true,<br>        “PX11390”: -480,<br>        “PX11621”: 8,<br>        “PX11657”: 1,<br>        “PX12081”: “Gecko”,<br>        “PX11908”: “20030107”,<br>        “PX12314”: “”,<br>        “PX11829”: true,<br>        “PX11464”: true,<br>        “PX12054”: 2,<br>        “PX11821”: “Netscape”,<br>        “PX11479”: “Mozilla”,<br>        “PX11674”: true,<br>        “PX12241”: 400,<br>        “PX11372”: false,<br>        “PX11683”: 1.5,<br>        “PX11561”: “3g”,<br>        “PX11877”: true,<br>        “PX12100”: true,<br>        “PX12506”: “arm”,<br>        “PX12507”: “64”,<br>        “PX12509”: false,<br>        “PX12510”: “”,<br>        “PX12511”: “macOS”,<br>        “PX12512”: “13.5.0”,<br>        “PX12513”: “117.0.5938.149”,<br>        “PX12548”: true,<br>        “PX12578”: {},<br>        “PX12579”: {<br>            “support”: true,<br>            “status”: {<br>                “effectiveType”: “3g”,<br>                “rtt”: 400,<br>                “downlink”: 1.5,<br>                “saveData”: false<br>            }<br>        },<br>        “PX12508”: [{<br>                “brand”: “Google Chrome”,<br>                “version”: “117”<br>            },<br>            {<br>                “brand”: “Not;A&#x3D;Brand”,<br>                “version”: “8”<br>            },<br>            {<br>                “brand”: “Chromium”,<br>                “version”: “117”<br>            }<br>        ],<br>        “PX12549”: true,<br>        “PX11539”: “sss”,<br>        “PX11528”: “”,<br>        “PX12271”: “sss”,<br>        “PX11849”: “ss”,<br>        “PX12464”: “ss”,<br>        “PX11356”: true,<br>        “PX12426”: true,<br>        “PX11791”: true,<br>        “PX11517”: true,<br>        “PX12520”: true,<br>        “PX12524”: “4YC14YCd4Y6YaI5oCR7r27”,<br>        “PX12527”: “3207084bd110863e23aa78e04”,<br>        “PX12260”: “UA”,<br>        “PX12249”: false,<br>        “PX11897”: “90e65465”,<br>        “PX12597”: 1,<br>        “PX11526”: false,<br>        “PX11684”: false,<br>        “PX11812”: false,<br>        “PX12335”: true,<br>        “PX12080”: 0,<br>        “PX11678”: false,<br>        “PX11349”: “visible”,<br>        “PX12397”: false,<br>        “PX11387”: 0,<br>        “PX12150”: 1920,<br>        “PX12304”: true,<br>        “PX11651”: 970,<br>        “PX11867”: “missing”,<br>        “PX12254”: true,<br>        “PX11540”: true,<br>        “PX11548”: false,<br>        “PX11446”: true,<br>        “PX12550”: 1,<br>        “PX12431”: 0,<br>        “PX11991”: 10,<br>        “PX11837”: 48,<br>        “PX11632”: 0,<br>        “PX11409”: 9,<br>        “PX11508”: “49e5084e”,<br>        “PX11452”: “7c5f9724”,<br>        “PX12218”: “65d826e0”,<br>        “PX12481”: “a9269e00”,<br>        “PX11780”: “50a5ec55”,<br>        “PX12551”: “https:”,<br>        “PX12553”: “Asia&#x2F;Shanghai”,<br>        “PX12567”: “w3c”,<br>        “PX12576”: “screen”,<br>        “PX12554”: “function getOwnPropertyDescriptors() { [native code] }”,<br>        “PX12577”: “function query() { [native code] }”,<br>        “PX12594”: false,<br>        “PX12566”: false,<br>        “PX12571”: “74d9c66”,<br>        “PX12581”: “default”,<br>        “PX11303”: false,<br>        “PX11515”: false,<br>        “PX12133”: false,<br>        “PX12340”: false,<br>        “PX11738”: false,<br>        “PX11723”: false,<br>        “PX11389”: false,<br>        “PX11839”: false,<br>        “PX11460”: false,<br>        “PX12102”: false,<br>        “PX11378”: false,<br>        “PX12317”: false,<br>        “PX12564”: null,<br>        “PX12565”: -1,<br>        “2655744:343041:31::6”: “3744655;252150;20;;7”<br>    }<br>}]</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sqf">有些值 是根据上个请求的返回值 计算的  <br>![Alt <span class="hljs-built_in">text</span>](image7.png)  <br><br>就是这么去跟  然后发两到 三个请求  <br>![Alt <span class="hljs-built_in">text</span>](image8.png)  <br>看到 <span class="hljs-built_in">score</span> = <span class="hljs-number">0</span> 就是过了   <br>这个socre 不是每个站都有的 并不一定给你这个  <br>看到px2也是基本成功的标志  <br><br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F; 成功的返回值<br>{“errors”:null,”messages”:null,”data”:{“token”:”eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkb3RSZXpXZWIiLCJqdGkiOiIyYjI0NzZiNi03ZDQ2LWRiYmItN2FlNS0xYzFjMjlhMGQ5M2IiLCJpc3MiOiJkb3RSRVogQVBJIn0.teGGMjUuam-dpY_hM7OmpJqr-jC5GrEZKweVkZ-aF7U”,”idleTimeoutInMinutes”:15},”metadata”:null}<br>&#x2F;&#x2F; 没过去的话<br>{“appId”:”PXkp4CLSb5”,”jsClientSrc”:”&#x2F;kp4CLSb5&#x2F;init.js”,”firstPartyEnabled”:true,”vid”:””,”uuid”:”07439816-842d-11ee-9fc1-c57753063f72”,”hostUrl”:”&#x2F;kp4CLSb5&#x2F;xhr”,”blockScript”:”&#x2F;kp4CLSb5&#x2F;captcha&#x2F;kp4CLSb5&#x2F;captcha.js?a&#x3D;c&amp;u&#x3D;07439816-842d-11ee-9fc1-c57753063f72&amp;v&#x3D;&amp;m&#x3D;0”,”altBlockScript”:”<a href="https://captcha.px-cloud.net/PXkp4CLSb5/captcha.js?a=c&u=07439816-842d-11ee-9fc1-c57753063f72&v=&m=0%22,%22customLogo%22:%22https://content.spirit.com/a/1679%22%7D">https://captcha.px-cloud.net/PXkp4CLSb5/captcha.js?a=c&amp;u=07439816-842d-11ee-9fc1-c57753063f72&amp;v=&amp;m=0&quot;,&quot;customLogo&quot;:&quot;https://content.spirit.com/a/1679&quot;}</a><br>&#x2F;&#x2F; 就是按压 验证码了</p><pre><code class="hljs"># 结束 这个网站是 px 和akamai 都有的 所以测试时比较麻烦  下一步要去捣鼓捣鼓 按压的验证码了  希望顺利  🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪  🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪  🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪  🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪  🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪🤪  </code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>shape-bypass</title>
    <link href="/2023/09/20/shape-bypass/"/>
    <url>/2023/09/20/shape-bypass/</url>
    
    <content type="html"><![CDATA[<h1 id="f5-shape-分析"><a href="#f5-shape-分析" class="headerlink" title="f5 shape 分析"></a>f5 shape 分析</h1><p>工作需要搞一下</p><h4 id="目标网址"><a href="#目标网址" class="headerlink" title="目标网址"></a>目标网址</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.jetblue.com/<br></code></pre></td></tr></table></figure><h4 id="查询请求"><a href="#查询请求" class="headerlink" title="查询请求"></a>查询请求</h4><p><img src="/2023/09/20/shape-bypass/xhr.png" alt="xhr.png"></p><p>他的参数在请求头中<br>添加后缀为 -a -b -c -d -f -z 的参数<br>这种在请求头添加参数的 一般都hook了 XMLHttpRequest.prototype.send<br>直接在控制台输入一下<br>就看到请求发出的JS文件了<br><img src="/2023/09/20/shape-bypass/xhr1.png" alt="xhr1.png">  </p><p>不过他又重写了这个东西 所以还是看请求堆栈<br><img src="/2023/09/20/shape-bypass/xhr2.png" alt="img.png"><br>这个jb-74873.js<br>就是他的所有代码了<br><img src="/2023/09/20/shape-bypass/xhr3.png" alt="img.png"><br>他的整体是一个vmp逻辑<br>而且js代码几分钟会变化一次  </p><h3 id="js检测"><a href="#js检测" class="headerlink" title="js检测"></a>js检测</h3><p>大概就是</p><ol><li>canvas </li><li>webgl</li><li>字体</li><li>webrtc</li><li>matchMedia</li><li>canplay 可以播放的音视频格式</li><li>屏幕尺寸</li><li>navigator</li><li>plugins</li><li>mimeTypes</li><li>document.featurePolicy</li><li>各种渲染</li><li>function 原型 检测</li></ol><p><img src="/2023/09/20/shape-bypass/jc1.png" alt="jc1.png"><br><img src="/2023/09/20/shape-bypass/jc2.png" alt="jc2.png"><br><img src="/2023/09/20/shape-bypass/jc3.png" alt="jc3.png"></p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="/2023/09/20/shape-bypass/res.png" alt="res.png"></p><p>目前并发还算顺利  </p><p><img src="/2023/09/20/shape-bypass/res1.png" alt="res1.png"></p><p>基本生成的一次请求头用二三十次<br>可以无限并发</p>]]></content>
    
    
    <categories>
      
      <category>JS逆向</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>cloudflare</title>
    <link href="/2023/07/06/cloudflare/"/>
    <url>/2023/07/06/cloudflare/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工作中遇到了有这个的网站 所以来搞一下<br>目标网址  </p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">aHR0cHM6Ly93d3cuYWxsZWdpYW50YWlyLmNvbS8</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><h1 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h1><p>先看看整体的流程</p><p><img src="/2023/07/06/cloudflare/liucheng.png"><br>拿到最后的 cf_clearance cookie 就是验证通过了 </p><h3 id="第一步-初始化页面"><a href="#第一步-初始化页面" class="headerlink" title="第一步 初始化页面"></a>第一步 初始化页面</h3><p><img src="/2023/07/06/cloudflare/html1.png"><br>页面内容 需要获取 _cf_chl_opt 这个中的部分值<br>和 md 在最后一步post 请求中会用到md<br>_cf_chl_opt.cRay  拼接 要请求的JS 地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">self._js_1_url = <span class="hljs-string">f&#x27;***/cdn-cgi/challenge-platform/h/<span class="hljs-subst">&#123;cFPWv&#125;</span>/orchestrate/managed/v1?ray=<span class="hljs-subst">&#123;cRay&#125;</span>&#x27;</span><br></code></pre></td></tr></table></figure><p>大部分都是这个格式</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>第一步的 JS 会发生一个  post 请求<br>地址为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;platform/h/g/flow/ov1/733297980:1688606447:HQv3MvVys5gnB9nrg2GMxuQz8eKvxSMvzd6FTHs5B0E/7e245d2bee981840/5efdbf7ebbe3f50&#x27;</span><br><span class="hljs-string">f&#x27;https://***/cdn-cgi/challenge-platform/h/g/flow/ov1/<span class="hljs-subst">&#123;js中的某个值&#125;</span>/cRay/<span class="hljs-subst">&#123;cHash&#125;</span>&#x27;</span><br></code></pre></td></tr></table></figure><p>发送数据为 </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;chReq&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;managed&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;cNounce&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;40056&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;cvId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;chC&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;chCAS&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;oV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;cRq&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;ru&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;aHR0cHM6Ly93d3cuYWxsZWdpYW50YWlyLmNvbS8=&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ra&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TW96aWxsYS81LjAgKE1hY2ludG9zaDsgSW50ZWwgTWFjIE9TIFggMTBfMTVfNykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzExNC4wLjAuMCBTYWZhcmkvNTM3LjM2&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;rm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;R0VU&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;KFSDJOFVmoj82BwR/FXAvmyHO7c0OIEUpTl6E7f8AtMMuXL+tcWhwUaEEI98z3C93JqXNA1QR+jWncGHtDEbC2d2g8m1nXikiEBO3waPXKbD+H1nSP/j6FYAqwl3gt7VP82rQuCrT/jbrLTmmcB/7QqpEVkVjLblzG3ZU91rJlT5Z7t9qS8mkh8TqpRS2589EJnLP52yxugQ8Uypom6B2WevozesJ0HHfqFwKj/n2rGekZMqaztprT09EDkog+C+d+sVTTe1JKfEgMFiLUDh4q2+kNFj2sGdGwnHmDFXFOHSmE0pV4+R115loViUuKy6Is3xk3uHM5r0r74KLXgCLcIiW2thrlFLCSe6EjLKV5hL0KKTygnMEyjvSVbNRriyzL747LwIH1HvpUx2+5BZxrIsZW6ehoBbalCipgy8qtdOTNGD2J9IsLdO0vApORMAoAX3ag8nwYE1XNnwWMPreAaPqLSmV9FG9ScOJcsc3eQW6lE30I515+QGfKodTrrXr2wv9vKcAJ/7bkNkq8aETDdWPFsMDwri0h522yC0dUIBiqU3G0K3rajfotir2yH3BHj9RVQg+Fu9nRyyXfgsbN8PPofxWwVRMqLiclJZszxhIkt/g1g237Sv6O1jmam3&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;t&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;MTY4ODYxMTM3NC44MDAwMDA=&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;cT&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1688611374</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;m&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kw/e2dwgtrWr9v84KaUNpllMVkA+9E5Bs7IfWyHDsWs=&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;i1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gZG6zyNbCiGlwncYw4DBaA==&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;i2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vbHMdj8uMdxJnpRkQs9y4g==&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;zh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Y3OoAsWGs8ShmcO7iHaBto+gGoelE8ZB/pf+9RpLrwo=&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;uh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xR8CtO7r16zI2pMrrz9IVIrV+K1oemYOymcQjo5KlbY=&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;hh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;T0wGGEaOTl1FXca+/ZzlgBao5CR/fBMfjzoqcDV4/cw=&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ie&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;kd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;pm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;po&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;mm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;cl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;t&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;wPr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;if&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ffs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>都是第一步提取的<br>加密后 再发出去<br><img src="/2023/07/06/cloudflare/post.png"><br>name &#x3D; v_{cRay}<br>因为返回的数据 需要用 cRay 解密<br>每次post 数据格式都这样 就不过多说明了</p><h3 id="第三步-normal"><a href="#第三步-normal" class="headerlink" title="第三步 normal"></a>第三步 normal</h3><p>需要请求一个 后缀为normal 的html 页面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;https://challenges.cloudflare.com/cdn-cgi/challenge-platform/h/g/turnstile/if/ov2/av0/rcv0/0/h4gmc/0x4AAAAAAADnPIDROrmt1Wwj/dark/normal&#x27;</span><br><br><span class="hljs-comment"># h4gmc 随机五位字符</span><br><span class="hljs-comment"># 0x4AAAAAAADnPIDROrmt1Wwj 为 网站的key  固定的</span><br></code></pre></td></tr></table></figure><p><img src="/2023/07/06/cloudflare/normal.png"><br>还是需要 cray 和 chash 和部分参数<br>在根据 cray 请求第二次的js<br>要加密的数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;chReq&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;chl_api_m&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;cNounce&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;28481&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;cvId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;chC&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;chCAS&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;oV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;cRq&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;ru&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;aHR0cDovL2NoYWxsZW5nZXMuY2xvdWRmbGFyZS5jb20vY2RuLWNnaS9jaGFsbGVuZ2UtcGxhdGZvcm0vaC9nL3R1cm5zdGlsZS9pZi9vdjIvYXYwL3JjdjAvMC9qaHk2YS8weDRBQUFBQUFBRG5QSURST3JtdDFXd2ovZGFyay9ub3JtYWw=&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ra&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TW96aWxsYS81LjAgKE1hY2ludG9zaDsgSW50ZWwgTWFjIE9TIFggMTBfMTVfNykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzExNC4wLjAuMCBTYWZhcmkvNTM3LjM2&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;rm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;R0VU&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;iTfgNjLhgpaI0mwE+Hoyjm3sRdbCSqUZqoJQPIObCxGSElpFFhNCvf/xyPhECrj4Yo1sdMNMfnviK37oFIKrzN9+C6hHQPds4sGcrMlTGaf4cMmRFh1x9Jt1h3QGas0IVBVgqNDzBVv/s2dE3502O3CiVY2ruKe0fWPfrAl8TT7CtGUnOpK871hMeQKbbSg708DGaeDDiatz4lIgJxxFbVdcOEEAHXBGRF6s29RfMYM9pIb09K2AbaDO9ORxyrbddR7AbbcGgpXUA9Mnfz3bQvLp1P+QL4apvpC+2RPIDMucP5IgJDw4ytAW6cwfv9EHIJsrkZs69aEXuFZLqm/Bq/yEDPNrs9N0nSFERQmUwMsQ8xwkZTg+W/XMO9tK63mdkMEF9sExxw9sN2yFhkkBMOqECC/L8ZValqfKKKRhMfovcexhLi4TxBJ6eMLKF0ZSX5JI2bGOPQS1tKhLnhtYh+c5KiGPU4jA8xrQKLJVAkEJLieOpP3lIpXGXKD3nFqZAl1CgS6r+OawJxK/A88f4s3DpNGQlP4BI4QJ10P/32M=&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;t&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;MTY4ODYxMTQ0MC44NzE=&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;m&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;VS9+Gsyx7EPMX6/gVYBpyiwfLlVGmC7T38bmHs3RAhU=&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;i1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;9k9pl1+0xD1jrTpl9UA/bw==&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;i2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hG8J/PtG3f4yyO74nwUikg==&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;uh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xR8CtO7r16zI2pMrrz9IVIrV+K1oemYOymcQjo5KlbY=&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;hh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;WCiLdNo2uN2aXsfJJhG2HFkP3bOo0fw8tsFAppLisvs=&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;zh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;9D+zbxCfwBPyr1pF5Wb5E9kRItcGU2xCgzO1zGTKToQ=&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ie&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;kd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;pm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;po&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;mm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;cl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;t&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;wPr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;if&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ffs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;chlApivId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;chlApiWidgetId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jhy6a&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;chlApiSitekey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x4AAAAAAADnPIDROrmt1Wwj&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;chlApiAction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;managed&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;chlApicData&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7e247f446c5b3ad6&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;chlApiChlPageData&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3gAFo2l2MbhwV2FqUDdWcmMva2s3NXF1Zk0zVWRRPT2jaXYyuGwzcFdYcGJVSzV5Y3VIWnBWaFEvWXc9PaFk2gEsMVdTTzFCK3pkTG9JMEZ3eXRIVk9qNVFSRWZQOEd4RWRIMkcvMFdjL0c2ekt0WStBNnY0Y0dqczh2d3h5eUdUOHJzT1ltQUVtNjFDQWFQRVJvTGlxYjlpaGVUOHFXS3BBT1JSbkVlMHRxSmlwdjV0M0ZIVmJjcHJkRU5yekllbWpXaDIySjF2dWZoeFJKajVnSWtWNG5HOTBEK0dYNTArbDFZVWY2Ukdic3UwOWNHYW1TUGpTN1N1dEIvYWNlUHVzL0FqMmlxcUhKSzJlY0JJcHBybm92a2ExYXdLbkxwK0VNVy8xZkh0QlhseVA1Z3pNeks2bjliRk9Pd210ODZsZWpqUTIvdVFXRHg2aVdyMGpocjRzQzdjL3YyTFlVSFd5aDZUYnZKYU14d009oW3ZLDlyQjROb0NKOXo4Qmw0YXkzWmNZNUJiMnV0NWJmMlBmOE1OVjZZd2JZT2s9oXS0TVRZNE9EWXhNVFF6Tnk0NU1qZz0=&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;chlApiACCH&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;19b997cb&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;chlApiUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;初始化地址&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;chlApiOrigin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;初始化地址&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;chlApiRcV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1/fif1NcEDXIlC2ll&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">// pageData 是这步js 中的 </span><br><span class="hljs-comment">// chlApicData 是第一步的cray 应该是要做关联的</span><br></code></pre></td></tr></table></figure><p>加密后在发出  会返回 一个长字符串<br><img src="/2023/07/06/cloudflare/envstr.png"><br>一般长度会在 十几万到二十几万之间<br>解密后  有两种分支  w.startsWith(‘window._‘)  根据开头字符判断<br>格式一 明文代码分支    这个就简单了<br>格式二 vmp 分支 所有代码会进入vmp 中执行<br>这步就是最难得步骤了 环境校验</p><h3 id="第四步-环境校验"><a href="#第四步-环境校验" class="headerlink" title="第四步 环境校验"></a>第四步 环境校验</h3><p>拿到上面的代码后<br>我是通过补环境的方式过的<br>因为 经过测试 需要校验的环境 点和 顺序是不一样的 导致无法通过还原算法的方式执行<br>也不排除有大神可以直接还原 反正我做不到..<br><img src="/2023/07/06/cloudflare/envjson.png"><br>基本上就是 十几个到二十个校验点<br>其中只有第一个是固定的.. 其他都会变化<br><img src="/2023/07/06/cloudflare/pic.png"><br>值得注意的一点是 他会请求一张图片<br>获取图片的宽高<br><a href="https://challenges.cloudflare.com/cdn-cgi/challenge-platform/h/g/img/7e245d3fd8b72bbd/1688609982279/SSIWaTPNMJAQEpP">https://challenges.cloudflare.com/cdn-cgi/challenge-platform/h/g/img/7e245d3fd8b72bbd/1688609982279/SSIWaTPNMJAQEpP</a></p><p>如上 获取完环境数据 在和之前一样 进行加密发送<br>也是有两种分支 </p><ol><li>校验通过 返回的 字符串解密后长度在1000-5000内 可以获得token</li><li>长度为10000以上 是需要进行再次的点击验证<br> <img src="/2023/07/06/cloudflare/click.png"><br> 点击验证就是在上面的 十几个环境后再加一个<br> 然后再判断是否通过<br> 解密后字符串长度在1000内就是失败了</li></ol><h3 id="第五步-获取-cf-clearance"><a href="#第五步-获取-cf-clearance" class="headerlink" title="第五步 获取 cf_clearance"></a>第五步 获取 cf_clearance</h3><p>如果环境通过 拿到token 后 需要在发送一次 获取 sh aw 三个参数<br><img src="/2023/07/06/cloudflare/token.png"></p><p>再向初始化页面 post 四个参数<br><img src="/2023/07/06/cloudflare/postsh.png"><br>就可以拿到<br><img src="/2023/07/06/cloudflare/cf.png"><br>和正常的页面代码了<br><img src="/2023/07/06/cloudflare/realhtml.png"><br>至此 验证就结束了<br>就可以拿着 cookie 去请求了</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>目前这个网站测试的是 需要保持 ip tls ua 完全一致<br>破解时使用什么 再次使用时就需要用完全一样的 ip  tls 指纹和 ua</p><p>环境校验时 有一个fetch 请求 和 图片请求 都需要发出<br>图片请求不发 百分百失败</p><p>调试时 需要注意 他对于时间的控制 很严格 页面调试时 动不动就超时 失败…</p>]]></content>
    
    
    <categories>
      
      <category>JS逆向</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
